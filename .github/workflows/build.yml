name: build-ssagepass-with-ndk
on:
  push: { branches: [ main, master ] }
  pull_request:
  workflow_dispatch:

permissions: { contents: read }

jobs:
  build-plugin-llvm14:
    runs-on: ubuntu-22.04
    outputs:
      plugin: ${{ steps.find_plugin.outputs.plugin }}
    steps:
      - uses: actions/checkout@v4

      - name: Install LLVM/Clang 14 + libc++
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake ninja-build \
            llvm-14-dev clang-14 clang-tools-14 lld-14 \
            libc++-14-dev libc++abi-14-dev
          echo "LLVM_DIR=/usr/lib/llvm-14/lib/cmake/llvm" >> $GITHUB_ENV
          echo "CC=clang-14" >> $GITHUB_ENV
          echo "CXX=clang++-14" >> $GITHUB_ENV

      - name: Build via CMake in Obfuscation/ (patch hardcoded paths)
        working-directory: Obfuscation
        run: |
          set -euxo pipefail
          # Un-hardcode các đường dẫn AOSP trong CMakeLists.txt như bạn đã show
          sed -i -E \
            -e 's|^set\(CMAKE_C_COMPILER .*$|# patched|' \
            -e 's|^set\(CMAKE_CXX_COMPILER .*$|# patched|' \
            -e 's|^set\(ENV\{LLVM_HOME\} .*$|# patched|' \
            -e 's|^set\(ENV\{LLVM_DIR\} .*$|# patched|' \
            -e 's|/home/ssage/Android/ndk-llvm/out/install/linux-x86/clang-dev/include|/usr/lib/llvm-14/include|g' \
            -e 's|/home/ssage/Android/ndk-llvm/out/install/linux-x86/clang-dev/include/c\\+\\+/v1|/usr/include/c++/v1|g' \
            CMakeLists.txt

          cmake -S . -B ../build -G Ninja \
            -DLLVM_DIR="${LLVM_DIR}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=${CC} \
            -DCMAKE_CXX_COMPILER=${CXX} \
            -DCMAKE_CXX_STANDARD=14 \
            -DCMAKE_CXX_FLAGS="-stdlib=libc++" \
            -DCMAKE_SHARED_LINKER_FLAGS="-stdlib=libc++"

          cmake --build ../build -j"$(nproc)"

      - name: Find plugin
        id: find_plugin
        run: |
          set -e
          f=$(find build -type f -name "*SsageObfuscator*.so" | head -n1 || true)
          test -n "$f" || { echo "::error::plugin .so not found"; find build -type f -maxdepth 2; exit 1; }
          echo "plugin=$f" >> $GITHUB_OUTPUT
          ls -l "$f"

      - name: Upload plugin
        uses: actions/upload-artifact@v4
        with:
          name: ssagepass-plugin
          path: ${{ steps.find_plugin.outputs.plugin }}

  ndk-smoke-test:
    needs: build-plugin-llvm14
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Download plugin
        uses: actions/download-artifact@v4
        with:
          name: ssagepass-plugin
          path: out

      - name: Setup NDK r25c
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          add-to-path: true

      - name: Show NDK clang version
        run: |
          "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++" --version

      - name: NDK compile test (host runs plugin, target = Android)
        run: |
          set -euxo pipefail
          cat > test.cpp <<'EOF'
          #include <cstdio>
          __attribute((__annotate__(("fla split strenc"))))
          static void f(){ std::puts("NDK compile OK"); }
          int main(){ f(); return 0; }
          EOF

          PLUGIN=$(find out -type f -name "*SsageObfuscator*.so" | head -n1)
          test -n "$PLUGIN"

          CXX="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++"
          # Quan trọng: plugin chạy ở HOST khi compile, còn output nhắm Android.
          "$CXX" --target=aarch64-linux-android31 -O2 -fPIC \
            -fpass-plugin="$PLUGIN" \
            -Xclang -load -Xclang "$PLUGIN" \
            -mllvm -split_num=3 \
            test.cpp -c -o test.o

          # Link thành ELF cho Android để đảm bảo compile pipeline hoàn tất
          "$CXX" --target=aarch64-linux-android31 test.o -shared -o libtest.so

      - name: Upload NDK smoke artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ndk-smoke
          path: |
            test.cpp
            test.o
            libtest.so
