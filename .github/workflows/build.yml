name: build-ssagepass

on:
  push: { branches: [ main, master ] }
  pull_request:
  workflow_dispatch:

permissions: { contents: read }

env:
  SSAGEPASS_REPO: https://github.com/SsageParuders/SsagePass.git
  SSAGEPASS_REF: ""   # có thể pin refs/heads/master hoặc SHA
  # Toolchains do bạn chỉ định:
  CUSTOM_CLANG_URL: https://github.com/fuqiuluo/amice/releases/download/android-ndk-r25c/linux-x86-refs_heads_main-clang-r522817.tar.gz
  CUSTOM_NDK_URL:   https://github.com/fuqiuluo/amice/releases/download/android-ndk-r25c/android-ndk-r25c.7z

jobs:
  build-and-ndk-smoke:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4

      - name: Install base deps
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            cmake ninja-build git curl xz-utils p7zip-full \
            patchelf
          # Thư mục làm việc cho toolchains tùy chỉnh
          mkdir -p "$HOME/toolchains" "$HOME/ndk"

      # -------------------- DOWLOAD & PREPARE CUSTOM CLANG --------------------
      - name: Download custom Clang toolchain (tar.gz)
        id: fetch-clang
        shell: bash
        run: |
          set -euxo pipefail
          cd "$HOME/toolchains"
          curl -L "$CUSTOM_CLANG_URL" -o clang-custom.tar.gz
          tar -xzf clang-custom.tar.gz
          # Tìm thư mục root vừa giải nén (chứa bin/clang++)
          ROOT=$(find . -maxdepth 2 -type f -name clang++ -printf '%h\n' | head -n1)
          test -n "$ROOT"
          CLANG_HOME=$(realpath "$ROOT/..")
          # Nếu cấu trúc khác, fallback lấy prefix 2 cấp trên
          if [ ! -d "$CLANG_HOME/bin" ]; then
            CLANG_HOME=$(realpath "$ROOT")
          fi
          echo "clang_home=$CLANG_HOME" >> "$GITHUB_OUTPUT"
          echo "CLANG_HOME=$CLANG_HOME" >> "$GITHUB_ENV"
          echo "$CLANG_HOME/bin" >> "$GITHUB_PATH"
          "$CLANG_HOME/bin/clang++" --version

      - name: Locate LLVM cmake dir from custom Clang
        id: find-llvm-cmake
        shell: bash
        run: |
          set -euxo pipefail
          CLANG_HOME="${CLANG_HOME:-$HOME/toolchains/clang}"
          # Tìm thư mục chứa cmake/llvm
          LLVM_DIR=$(find "$CLANG_HOME" -type d -path "*/cmake/llvm" | head -n1 || true)
          if [ -z "$LLVM_DIR" ]; then
            # một số gói dùng lib64/cmake/llvm
            LLVM_DIR=$(find "$CLANG_HOME" -type d -path "*/lib*/cmake/llvm" | head -n1 || true)
          end_if=false
          fi
          test -n "$LLVM_DIR"
          echo "LLVM_DIR=$LLVM_DIR" >> "$GITHUB_ENV"
          echo "llvm_dir=$LLVM_DIR" >> "$GITHUB_OUTPUT"
          # Thiết lập compiler dùng clang tùy chỉnh
          echo "CC=$CLANG_HOME/bin/clang"     >> "$GITHUB_ENV"
          echo "CXX=$CLANG_HOME/bin/clang++"  >> "$GITHUB_ENV"

      # -------------------- CLONE & PREPARE SSAGEPASS --------------------
      - name: Clone upstream SsagePass
        id: clone
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p third_party
          cd third_party
          git clone --depth=1 "${SSAGEPASS_REPO}" SsagePass
          cd SsagePass
          if [ -n "${SSAGEPASS_REF}" ]; then
            git fetch origin "${SSAGEPASS_REF}" && git checkout FETCH_HEAD
          fi
          echo "src_dir=$PWD" >> "$GITHUB_OUTPUT"
          find . -maxdepth 2 -print

      - name: Detect CMakeLists (prefer target SsageObfuscator)
        id: detect_dir
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.clone.outputs.src_dir }}"
          mapfile -t CANDS < <(find "$SRC" -type f -name 'CMakeLists.txt' -printf '%h\n' | sort -u)
          BUILD_DIR=""
          for d in "${CANDS[@]}"; do
            if grep -Eiq 'add_library\s*\(\s*SsageObfuscator' "$d/CMakeLists.txt"; then
              BUILD_DIR="$d"; break
            fi
          done
          if [ -z "$BUILD_DIR" ] && [ ${#CANDS[@]} -gt 0 ]; then
            BUILD_DIR="${CANDS[0]}"
          fi
          test -n "$BUILD_DIR" || { echo "::error::No CMakeLists.txt found in cloned repo"; exit 1; }
          echo "build_dir=$BUILD_DIR" >> "$GITHUB_OUTPUT"
          nl -ba "$BUILD_DIR/CMakeLists.txt" | sed -n '1,160p'

      - name: Patch CMakeLists (drop hardcoded AOSP paths; use C++14; default libstdc++)
        shell: bash
        run: |
          set -euo pipefail
          D="${{ steps.detect_dir.outputs.build_dir }}"
          cp "$D/CMakeLists.txt" "$D/CMakeLists.txt.orig" || true

          # Gỡ hardcode compiler/LLVM env nếu có
          sed -i -E \
            -e 's|^set\(CMAKE_C_COMPILER .*$|# patched by CI|g' \
            -e 's|^set\(CMAKE_CXX_COMPILER .*$|# patched by CI|g' \
            -e 's|^set\(ENV\{LLVM_HOME\} .*$|# patched by CI|g' \
            -e 's|^set\(ENV\{LLVM_DIR\} .*$|# patched by CI|g' \
            "$D/CMakeLists.txt" || true

          # Bỏ ép libc++ / include AOSP; dùng libstdc++ mặc định
          sed -i -E \
            -e 's|/home/ssage/Android/ndk-llvm/out/install/linux-x86/clang-dev/include/c\+\+/v1||g' \
            -e 's|/home/ssage/Android/ndk-llvm/out/install/linux-x86/clang-dev/include|'"$CLANG_HOME"'/include|g' \
            -e 's|-stdlib=libc\+\+||g' \
            "$D/CMakeLists.txt" || true

          # Đảm bảo C++14
          grep -q 'CMAKE_CXX_STANDARD' "$D/CMakeLists.txt" || \
            printf '\nset(CMAKE_CXX_STANDARD 14)\n' >> "$D/CMakeLists.txt"

      - name: Strip legacy PM & force NEWPM-only
        shell: bash
        run: |
          set -euxo pipefail
          D="${{ steps.detect_dir.outputs.build_dir }}"
          sed -i '/LegacyLowerSwitch\.cpp/d' "$D/CMakeLists.txt" || true
          {
            echo ''
            echo '# Force NEW PM only in CI'
            echo 'if (TARGET SsageObfuscator)'
            echo '  target_compile_definitions(SsageObfuscator PRIVATE SSAGE_NEWPM_ONLY=1 LLVM_DISABLE_LEGACY=1)'
            echo 'endif()'
          } >> "$D/CMakeLists.txt"

      - name: Aggressively neutralize Legacy PM registrations in sources
        shell: bash
        run: |
          set -euxo pipefail
          D="${{ steps.detect_dir.outputs.build_dir }}"
          SRC_DIR="$D/src"
          if [ -d "$SRC_DIR" ]; then
            mapfile -t FILES < <(grep -RIl \
              -e 'RegisterPass<' \
              -e 'INITIALIZE_PASS' \
              -e 'PassManagerBuilder' \
              -e 'legacy::' \
              -e 'ModulePass' \
              -e 'FunctionPass' \
              "$SRC_DIR" || true)
            for f in "${FILES[@]}"; do
              cp "$f" "$f.ci.bak" || true
              sed -i -E 's/^(.*RegisterPass<.*)$/\/\/ [CI] drop legacy: \1/' "$f" || true
              sed -i -E 's/^(.*INITIALIZE_PASS.*)$/\/\/ [CI] drop legacy: \1/' "$f" || true
              sed -i -E 's/^(.*PassManagerBuilder.*)$/\/\/ [CI] drop legacy: \1/' "$f" || true
              sed -i -E 's/^(.*legacy::.*)$/\/\/ [CI] drop legacy: \1/' "$f" || true
              sed -i -E 's/^(.*\b(ModulePass|FunctionPass)\b.*)$/\/\/ [CI] drop legacy: \1/' "$f" || true
            done
          fi

      # -------------------- BUILD WITH CUSTOM CLANG --------------------
      - name: Configure (custom Clang)
        shell: bash
        env:
          LLVM_DIR: ${{ env.LLVM_DIR }}
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
        run: |
          set -euo pipefail
          D="${{ steps.detect_dir.outputs.build_dir }}"
          cmake -S "$D" -B build -G Ninja \
            -DLLVM_DIR="${LLVM_DIR}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER="${CC}" \
            -DCMAKE_CXX_COMPILER="${CXX}" \
            -DCMAKE_CXX_STANDARD=14

      - name: Build
        shell: bash
        run: cmake --build build -j"$(nproc)"

      - name: Locate built plugin
        id: find_plugin
        shell: bash
        run: |
          set -e
          f=$(find build -type f -name "*SsageObfuscator*.so" -o -name "SsageObfuscator.so" | head -n1 || true)
          test -n "$f" || { echo "::error::plugin .so not found"; find build -maxdepth 2 -type f -printf '%p\n'; exit 1; }
          echo "plugin=$f" >> "$GITHUB_OUTPUT"
          ls -l "$f"

      - name: Smoke test (host custom clang++, NEW PM only)
        shell: bash
        run: |
          set -euxo pipefail
          cat > smoke.cpp <<'EOF'
          #include <cstdio>
          __attribute((__annotate__(("fla split strenc"))))
          static void secret(){ std::puts("hello"); }
          int main(){ secret(); return 0; }
          EOF
          PLUGIN="${{ steps.find_plugin.outputs.plugin }}"
          "$CLANG_HOME/bin/clang++" smoke.cpp -O2 -o smoke.app \
            -fpass-plugin="$PLUGIN"
          ./smoke.app || true

      # -------------------- DOWNLOAD PROVIDED NDK (7z) --------------------
      - name: Download NDK r25c (provided .7z)
        id: fetch-ndk
        shell: bash
        run: |
          set -euxo pipefail
          cd "$HOME/ndk"
          curl -L "$CUSTOM_NDK_URL" -o android-ndk-r25c.7z
          7z x -y android-ndk-r25c.7z > /dev/null
          # Detect root folder (thường là android-ndk-r25c)
          ROOT=$(find . -maxdepth 2 -type d -name "android-ndk-*" | head -n1)
          test -n "$ROOT"
          NDK_HOME=$(realpath "$ROOT")
          echo "NDK=$NDK_HOME" >> "$GITHUB_ENV"
          echo "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"
          "$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++" --version

      - name: NDK compile test (NEW PM only; no legacy)
        shell: bash
        run: |
          set -euxo pipefail
          PLUGIN="${{ steps.find_plugin.outputs.plugin }}"
          CXX="$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++"

          cat > test.cpp <<'EOF'
          #include <cstdio>
          __attribute((__annotate__(("fla split strenc"))))
          static void f(){ std::puts("NDK compile OK"); }
          int main(){ f(); return 0; }
          EOF

          "$CXX" --target=aarch64-linux-android31 -O2 -fPIC \
            -fpass-plugin="$PLUGIN" \
            -c test.cpp -o test.o

          "$CXX" --target=aarch64-linux-android31 test.o -shared -o libtest.so
          file libtest.so || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ssagepass-artifacts
          path: |
            ${{ steps.find_plugin.outputs.plugin }}
            smoke.cpp
            smoke.app
            test.cpp
            test.o
            libtest.so
            ${{ steps.detect_dir.outputs.build_dir }}/CMakeLists.txt
            ${{ steps.detect_dir.outputs.build_dir }}/CMakeLists.txt.orig
