name: try-ndk-with-prebuilt-ssagepass

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:

permissions: { contents: read }

env:
  # Upstream prebuilt .so from release 1.0:
  SSAGE_SO_URL: https://github.com/SsageParuders/SsagePass/releases/download/1.0/libSsageObfuscator.so
  # (Optional) đặt SHA256 nếu bạn muốn verify integrity:
  SSAGE_SO_SHA256: ""  # ví dụ: "abc123..." (để trống = bỏ qua kiểm tra)

jobs:
  ndk-test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4

      - name: Base deps (curl, unzip, 7z, libc++)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y curl unzip p7zip-full
          # Cài libc++ phòng trường hợp .so của tác giả link bằng libc++
          sudo apt-get install -y libc++-14-dev libc++abi-14-dev || true

      - name: Download prebuilt libSsageObfuscator.so (upstream)
        id: fetch_so
        run: |
          set -euxo pipefail
          mkdir -p plugin
          curl -L "$SSAGE_SO_URL" -o plugin/libSsageObfuscator.so
          test -s plugin/libSsageObfuscator.so
          if [ -n "$SSAGE_SO_SHA256" ]; then
            echo "$SSAGE_SO_SHA256  plugin/libSsageObfuscator.so" | sha256sum -c -
          fi
          chmod a+r plugin/libSsageObfuscator.so
          echo "plugin=$(pwd)/plugin/libSsageObfuscator.so" >> "$GITHUB_OUTPUT"
          ls -l plugin

      # --- PIN NDK r25c; nếu action lỗi 404 thì fallback tải tay ---
      - name: Setup NDK r25c (preferred)
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          add-to-path: true
        continue-on-error: true

      - name: Fallback:download NDK r25c from official link
        if: steps.setup-ndk.outcome != 'success'
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/ndk"
          cd "$HOME/ndk"
          curl -L -o android-ndk-r25c-linux.zip \
            https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
          # SHA1 do Google công bố; nếu muốn thì bật check:
          # echo "53af80a1cce9144025b81c78c8cd556bff42bd0e  android-ndk-r25c-linux.zip" | sha1sum -c -
          unzip -q android-ndk-r25c-linux.zip
          echo "ANDROID_NDK_HOME=$HOME/ndk/android-ndk-r25c" >> $GITHUB_ENV
          echo "NDK=$HOME/ndk/android-ndk-r25c" >> $GITHUB_ENV
          echo "$HOME/ndk/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Verify NDK clang
        run: |
          set -euxo pipefail
          if [ -n "${{ steps.setup-ndk.outputs.ndk-path }}" ]; then
            NDK="${{ steps.setup-ndk.outputs.ndk-path }}"
          else
            NDK="${NDK:-$ANDROID_NDK_HOME}"
          fi
          "${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++" --version

      - name: NDK compile test (NEW PM only; no legacy)
        run: |
          set -euxo pipefail
          PLUGIN="${{ steps.fetch_so.outputs.plugin }}"

          if [ -n "${{ steps.setup-ndk.outputs.ndk-path }}" ]; then
            NDK="${{ steps.setup-ndk.outputs.ndk-path }}"
          else
            NDK="${NDK:-$ANDROID_NDK_HOME}"
          fi
          CXX="${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++"

          # tiny sample with annotations to trigger passes (per README)
          cat > test.cpp <<'EOF'
          #include <cstdio>
          __attribute((__annotate__(("fla split strenc"))))
          static void f(){ std::puts("NDK compile OK"); }
          int main(){ f(); return 0; }
          EOF

          # NEW PM only: KHÔNG -Xclang, KHÔNG -mllvm để tránh dính Legacy PM
          "$CXX" --target=aarch64-linux-android31 -O2 -fPIC \
            -fpass-plugin="$PLUGIN" \
            -c test.cpp -o test.o

          "$CXX" --target=aarch64-linux-android31 test.o -shared -o libtest.so
          file libtest.so || true

      # Tuỳ chọn: thử "nạp kép" để truyền -mllvm (KHÔNG làm fail CI)
      - name: Optional legacy double-load (may fail; ignore)
        continue-on-error: true
        run: |
          set -euxo pipefail
          PLUGIN="${{ steps.fetch_so.outputs.plugin }}"
          if [ -n "${{ steps.setup-ndk.outputs.ndk-path }}" ]; then
            NDK="${{ steps.setup-ndk.outputs.ndk-path }}"
          else
            NDK="${NDK:-$ANDROID_NDK_HOME}"
          fi
          CXX="${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++"

          "$CXX" --target=aarch64-linux-android31 -O2 -fPIC \
            -fpass-plugin="$PLUGIN" \
            -Xclang -load -Xclang "$PLUGIN" \
            -mllvm -split_num=3 \
            -c test.cpp -o test_legacy.o

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ndk-prebuilt-test
          path: |
            plugin/libSsageObfuscator.so
            test.cpp
            test.o
            libtest.so
            test_legacy.o
