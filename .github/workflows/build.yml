name: build-ssagepass

on:
  push: { branches: [ main, master ] }
  pull_request:
  workflow_dispatch:

permissions: { contents: read }

env:
  SSAGEPASS_REPO: https://github.com/SsageParuders/SsagePass.git
  SSAGEPASS_REF: ""   # có thể pin refs/heads/master hoặc SHA nếu muốn

jobs:
  build-and-ndk-smoke:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4

      - name: Install LLVM/Clang 14 (host)
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            cmake ninja-build \
            llvm-14-dev clang-14 clang-tools-14 lld-14 git
          echo "LLVM_DIR=/usr/lib/llvm-14/lib/cmake/llvm" >> "$GITHUB_ENV"
          echo "CC=clang-14" >> "$GITHUB_ENV"
          echo "CXX=clang++-14" >> "$GITHUB_ENV"

      - name: Clone upstream SsagePass
        id: clone
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p third_party
          cd third_party
          git clone --depth=1 "${SSAGEPASS_REPO}" SsagePass
          cd SsagePass
          if [ -n "${SSAGEPASS_REF}" ]; then
            git fetch origin "${SSAGEPASS_REF}" && git checkout FETCH_HEAD
          fi
          echo "src_dir=$PWD" >> "$GITHUB_OUTPUT"
          find . -maxdepth 2 -print

      - name: Detect CMakeLists (prefer target SsageObfuscator)
        id: detect_dir
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.clone.outputs.src_dir }}"
          mapfile -t CANDS < <(find "$SRC" -type f -name 'CMakeLists.txt' -printf '%h\n' | sort -u)
          BUILD_DIR=""
          for d in "${CANDS[@]}"; do
            if grep -Eiq 'add_library\s*\(\s*SsageObfuscator' "$d/CMakeLists.txt"; then
              BUILD_DIR="$d"; break
            fi
          done
          if [ -z "$BUILD_DIR" ] && [ ${#CANDS[@]} -gt 0 ]; then
            BUILD_DIR="${CANDS[0]}"
          fi
          test -n "$BUILD_DIR" || { echo "::error::No CMakeLists.txt found in cloned repo"; exit 1; }
          echo "build_dir=$BUILD_DIR" >> "$GITHUB_OUTPUT"
          nl -ba "$BUILD_DIR/CMakeLists.txt" | sed -n '1,160p'

      - name: Patch CMakeLists (drop hardcoded AOSP paths; use C++14; default libstdc++)
        shell: bash
        run: |
          set -euo pipefail
          D="${{ steps.detect_dir.outputs.build_dir }}"
          cp "$D/CMakeLists.txt" "$D/CMakeLists.txt.orig" || true

          # Gỡ hardcode compiler/LLVM env nếu có
          sed -i -E \
            -e 's|^set\(CMAKE_C_COMPILER .*$|# patched by CI|g' \
            -e 's|^set\(CMAKE_CXX_COMPILER .*$|# patched by CI|g' \
            -e 's|^set\(ENV\{LLVM_HOME\} .*$|# patched by CI|g' \
            -e 's|^set\(ENV\{LLVM_DIR\} .*$|# patched by CI|g' \
            "$D/CMakeLists.txt" || true

          # Bỏ ép libc++ / include path AOSP; dùng libstdc++ mặc định của host
          sed -i -E \
            -e 's|/home/ssage/Android/ndk-llvm/out/install/linux-x86/clang-dev/include/c\+\+/v1||g' \
            -e 's|/home/ssage/Android/ndk-llvm/out/install/linux-x86/clang-dev/include|/usr/lib/llvm-14/include|g' \
            -e 's|-stdlib=libc\+\+||g' \
            "$D/CMakeLists.txt" || true

          # Đảm bảo C++14
          grep -q 'CMAKE_CXX_STANDARD' "$D/CMakeLists.txt" || \
            printf '\nset(CMAKE_CXX_STANDARD 14)\n' >> "$D/CMakeLists.txt"

      - name: Strip legacy PM file & force NEWPM-only macro
        shell: bash
        run: |
          set -euxo pipefail
          D="${{ steps.detect_dir.outputs.build_dir }}"
          # Gỡ source legacy thường gặp
          sed -i '/LegacyLowerSwitch\.cpp/d' "$D/CMakeLists.txt" || true
          # Thêm macro ép NEW PM (nếu code có nhánh điều kiện)
          {
            echo ''
            echo '# Force NEW PM only in CI'
            echo 'if (TARGET SsageObfuscator)'
            echo '  target_compile_definitions(SsageObfuscator PRIVATE SSAGE_NEWPM_ONLY=1 LLVM_DISABLE_LEGACY=1)'
            echo 'endif()'
          } >> "$D/CMakeLists.txt"

      - name: Aggressively neutralize Legacy PM registrations in sources
        shell: bash
        run: |
          set -euxo pipefail
          D="${{ steps.detect_dir.outputs.build_dir }}"
          SRC_DIR="$D/src"
          if [ -d "$SRC_DIR" ]; then
            mapfile -t FILES < <(grep -RIl \
              -e 'RegisterPass<' \
              -e 'INITIALIZE_PASS' \
              -e 'PassManagerBuilder' \
              -e 'legacy::' \
              -e 'ModulePass' \
              -e 'FunctionPass' \
              "$SRC_DIR" || true)
            for f in "${FILES[@]}"; do
              cp "$f" "$f.ci.bak" || true
              # comment các dòng legacy phổ biến (không ảnh hưởng NEW PM)
              sed -i -E 's/^(.*RegisterPass<.*)$/\/\/ [CI] drop legacy: \1/' "$f" || true
              sed -i -E 's/^(.*INITIALIZE_PASS.*)$/\/\/ [CI] drop legacy: \1/' "$f" || true
              sed -i -E 's/^(.*PassManagerBuilder.*)$/\/\/ [CI] drop legacy: \1/' "$f" || true
              sed -i -E 's/^(.*legacy::.*)$/\/\/ [CI] drop legacy: \1/' "$f" || true
              # tránh thậm chí cả lớp base legacy khi chỉ dùng cho đăng ký
              sed -i -E 's/^(.*\b(ModulePass|FunctionPass)\b.*)$/\/\/ [CI] drop legacy: \1/' "$f" || true
            done
          fi

      - name: Configure (host LLVM 14)
        shell: bash
        env:
          LLVM_DIR: ${{ env.LLVM_DIR }}
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
        run: |
          set -euo pipefail
          D="${{ steps.detect_dir.outputs.build_dir }}"
          cmake -S "$D" -B build -G Ninja \
            -DLLVM_DIR="${LLVM_DIR}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER="${CC}" \
            -DCMAKE_CXX_COMPILER="${CXX}" \
            -DCMAKE_CXX_STANDARD=14

      - name: Build
        shell: bash
        run: cmake --build build -j"$(nproc)"

      - name: Locate built plugin
        id: find_plugin
        shell: bash
        run: |
          set -e
          f=$(find build -type f -name "*SsageObfuscator*.so" -o -name "SsageObfuscator.so" | head -n1 || true)
          test -n "$f" || { echo "::error::plugin .so not found"; find build -maxdepth 2 -type f -printf '%p\n'; exit 1; }
          echo "plugin=$f" >> "$GITHUB_OUTPUT"
          ls -l "$f"

      - name: Smoke test (host clang++-14, NEW PM only)
        shell: bash
        run: |
          set -euxo pipefail
          cat > smoke.cpp <<'EOF'
          #include <cstdio>
          __attribute((__annotate__(("fla split strenc"))))
          static void secret(){ std::puts("hello"); }
          int main(){ secret(); return 0; }
          EOF
          PLUGIN="${{ steps.find_plugin.outputs.plugin }}"
          # CHỈ NEW PM: KHÔNG -Xclang, KHÔNG -mllvm (tránh legacy)
          clang++-14 smoke.cpp -O2 -o smoke.app \
            -fpass-plugin="$PLUGIN"
          ./smoke.app || true

      # --- PIN NDK r25c; nếu action lỗi 404 thì fallback tải tay ---
      - name: Setup NDK r25c (preferred)
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          add-to-path: true
        continue-on-error: true

      - name: Fallback:download NDK r25c from official link
        if: steps.setup-ndk.outcome != 'success'
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/ndk"
          cd "$HOME/ndk"
          curl -L -o android-ndk-r25c-linux.zip \
            https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
          echo "53af80a1cce9144025b81c78c8cd556bff42bd0e  android-ndk-r25c-linux.zip" | sha1sum -c -
          unzip -q android-ndk-r25c-linux.zip
          echo "ANDROID_NDK_HOME=$HOME/ndk/android-ndk-r25c" >> $GITHUB_ENV
          echo "NDK=$HOME/ndk/android-ndk-r25c" >> $GITHUB_ENV
          echo "$HOME/ndk/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Verify NDK clang version (expect LLVM 14.x)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -n "${{ steps.setup-ndk.outputs.ndk-path }}" ]; then
            NDK="${{ steps.setup-ndk.outputs.ndk-path }}"
          else
            NDK="${NDK:-$ANDROID_NDK_HOME}"
          fi
          "${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++" --version

      - name: NDK compile test (NEW PM only; no legacy load)
        shell: bash
        run: |
          set -euxo pipefail
          PLUGIN="${{ steps.find_plugin.outputs.plugin }}"
          if [ -n "${{ steps.setup-ndk.outputs.ndk-path }}" ]; then
            NDK="${{ steps.setup-ndk.outputs.ndk-path }}"
          else
            NDK="${NDK:-$ANDROID_NDK_HOME}"
          fi
          CXX="${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++"

          cat > test.cpp <<'EOF'
          #include <cstdio>
          __attribute((__annotate__(("fla split strenc"))))
          static void f(){ std::puts("NDK compile OK"); }
          int main(){ f(); return 0; }
          EOF

          "$CXX" --target=aarch64-linux-android31 -O2 -fPIC \
            -fpass-plugin="$PLUGIN" \
            -c test.cpp -o test.o

          "$CXX" --target=aarch64-linux-android31 test.o -shared -o libtest.so
          file libtest.so || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ssagepass-artifacts
          path: |
            ${{ steps.find_plugin.outputs.plugin }}
            smoke.cpp
            smoke.app
            test.cpp
            test.o
            libtest.so
            ${{ steps.detect_dir.outputs.build_dir }}/CMakeLists.txt
            ${{ steps.detect_dir.outputs.build_dir }}/CMakeLists.txt.orig
