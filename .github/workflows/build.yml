name: try-ndk-with-prebuilt-ssagepass

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:

permissions: { contents: read }

env:
  SSAGE_SO_URL: https://github.com/SsageParuders/SsagePass/releases/download/1.0/libSsageObfuscator.so
  SSAGE_SO_SHA256: ""  # điền nếu muốn verify

jobs:
  ndk-test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4

      - name: Base deps (curl, unzip, 7z, libc++)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y curl unzip p7zip-full
          sudo apt-get install -y libc++-14-dev libc++abi-14-dev || true

      - name: Download prebuilt libSsageObfuscator.so (upstream)
        id: fetch_so
        run: |
          set -euxo pipefail
          mkdir -p plugin
          curl -L "$SSAGE_SO_URL" -o plugin/libSsageObfuscator.so
          test -s plugin/libSsageObfuscator.so
          if [ -n "$SSAGE_SO_SHA256" ]; then
            echo "$SSAGE_SO_SHA256  plugin/libSsageObfuscator.so" | sha256sum -c -
          fi
          chmod a+r plugin/libSsageObfuscator.so
          echo "plugin=$(pwd)/plugin/libSsageObfuscator.so" >> "$GITHUB_OUTPUT"
          ls -l plugin

      # --- PIN NDK r25c; nếu action lỗi 404, fallback tải tay ---
      - name: Setup NDK r25c (preferred)
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          add-to-path: true
        continue-on-error: true

      - name: Fallback:download NDK r25c from official link
        if: steps.setup-ndk.outcome != 'success'
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/ndk"
          cd "$HOME/ndk"
          curl -L -o android-ndk-r25c-linux.zip \
            https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
          unzip -q android-ndk-r25c-linux.zip
          echo "ANDROID_NDK_HOME=$HOME/ndk/android-ndk-r25c" >> $GITHUB_ENV
          echo "NDK=$HOME/ndk/android-ndk-r25c" >> $GITHUB_ENV
          echo "$HOME/ndk/android-ndk-r25c/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Verify NDK clang (expect LLVM 14.x)
        run: |
          set -euxo pipefail
          if [ -n "${{ steps.setup-ndk.outputs.ndk-path }}" ]; then
            NDK="${{ steps.setup-ndk.outputs.ndk-path }}"
          else
            NDK="${NDK:-$ANDROID_NDK_HOME}"
          fi
          "${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++" --version

      # ---------- MẠNH NHẤT (NEW PM only, an toàn) ----------
      - name: NDK compile test (MAX obfuscation via annotations, NEW PM only)
        run: |
          set -euxo pipefail
          PLUGIN="${{ steps.fetch_so.outputs.plugin }}"
          if [ -n "${{ steps.setup-ndk.outputs.ndk-path }}" ]; then
            NDK="${{ steps.setup-ndk.outputs.ndk-path }}"
          else
            NDK="${NDK:-$ANDROID_NDK_HOME}"
          fi
          CXX="${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++"

          # Bật "nhiều pass" qua annotation: fla/split/strenc/bcf/indibr/indcall/funcwrap/vm/mba
          # Pass nào không tồn tại sẽ bị plugin bỏ qua, pass có sẽ kích hoạt.
          cat > test_max.cpp <<'EOF'
          #include <cstdio>
          __attribute__((noinline))
          __attribute((__annotate__(("fla split strenc bcf indibr indcall funcwrap vm mba"))))
          static void ultra(){ std::puts("NDK MAX obf"); }

          // thêm 1 hàm nữa cho chắc ăn
          __attribute__((noinline))
          __attribute((__annotate__(("fla split strenc bcf vm mba"))))
          static void ultra2(){ std::puts("NDK MAX obf 2"); }

          int main(){ ultra(); ultra2(); return 0; }
          EOF

          "$CXX" --target=aarch64-linux-android31 -O2 -fPIC \
            -fpass-plugin="$PLUGIN" \
            -c test_max.cpp -o test_max.o

          "$CXX" --target=aarch64-linux-android31 test_max.o -shared -o libtest_max.so
          file libtest_max.so || true

      # ---------- THỬ "MẠNH NHẤT" QUA -mllvm (tùy chọn, không làm fail) ----------
      - name: Optional:try legacy-style tuning flags (-mllvm), ignore failures
        continue-on-error: true
        run: |
          set -euxo pipefail
          PLUGIN="${{ steps.fetch_so.outputs.plugin }}"
          if [ -n "${{ steps.setup-ndk.outputs.ndk-path }}" ]; then
            NDK="${{ steps.setup-ndk.outputs.ndk-path }}"
          else
            NDK="${NDK:-$ANDROID_NDK_HOME}"
          fi
          CXX="${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++"

          # Dùng lại test_max.cpp; thử nạp kép & đẩy tham số "mạnh"
          # (Tên option có thể khác; nếu plugin không nhận sẽ cảnh báo/ignore)
          "$CXX" --target=aarch64-linux-android31 -O2 -fPIC \
            -fpass-plugin="$PLUGIN" \
            -Xclang -load -Xclang "$PLUGIN" \
            -mllvm -split_num=16 \
            -mllvm -bcf_prob=100 \
            -mllvm -fla_times=2 \
            -mllvm -mba=1 \
            -c test_max.cpp -o test_max_tuned.o

          "$CXX" --target=aarch64-linux-android31 test_max_tuned.o -shared -o libtest_max_tuned.so
          file libtest_max_tuned.so || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ndk-prebuilt-test-strong
          path: |
            plugin/libSsageObfuscator.so
            test_max.cpp
            test_max.o
            libtest_max.so
            test_max_tuned.o
            libtest_max_tuned.so
