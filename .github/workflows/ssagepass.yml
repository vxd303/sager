name: build-ssagepass-ndk

on:
  push: { branches: [ main ] }
  pull_request: { branches: [ main ] }
  workflow_dispatch:

permissions: { contents: read }

env:
  SSAGEPASS_REPO: https://github.com/lux-QAQ/SsagePass.git
  SSAGEPASS_REF: ""   # pin SHA/branch nếu muốn

jobs:
  build-and-ndk:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install host LLVM14 + deps (for building plugin)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y llvm-14 llvm-14-dev llvm-14-tools clang-14
          sudo apt-get install -y libc++1-14 libc++abi1-14 libc++-14-dev libc++abi-14-dev
          sudo apt-get install -y ninja-build cmake git curl file

      - name: Set host toolchain env
        run: |
          echo "HOST_LLVM_DIR=/usr/lib/llvm-14/lib/cmake/llvm" >> "$GITHUB_ENV"
          echo "CC=clang-14"  >> "$GITHUB_ENV"
          echo "CXX=clang-14" >> "$GITHUB_ENV"

      - name: Clone SsagePass
        id: clone
        run: |
          set -euxo pipefail
          mkdir -p third_party && cd third_party
          git clone --depth=1 --branch main "${SSAGEPASS_REPO}" SsagePass
          cd SsagePass
          if [ -n "${SSAGEPASS_REF}" ]; then
            git fetch origin "${SSAGEPASS_REF}" && git checkout FETCH_HEAD
          fi
          echo "src_dir=$PWD/Obfuscation" >> "$GITHUB_OUTPUT"
          find . -maxdepth 2 -print

      - name: Detect build dir (Obfuscation)
        id: detect
        shell: bash
        run: |
          set -euxo pipefail
          SRC="${{ steps.clone.outputs.src_dir }}"
          test -f "$SRC/CMakeLists.txt" || { echo "::error::No CMakeLists in $SRC"; exit 1; }
          echo "build_dir=$SRC" >> "$GITHUB_OUTPUT"

      # (tuỳ repo của bạn đã từng vá, bạn có thể giữ/loại các patch dưới đây)
      - name: Quick compatibility patch set (LLVM14)
        run: |
          set -euxo pipefail
          D="${{ steps.detect.outputs.build_dir }}"
          # Bật C++17 nếu cần
          if grep -qE 'CMAKE_CXX_STANDARD' "$D/CMakeLists.txt"; then
            sed -i -E 's/CMAKE_CXX_STANDARD[[:space:]]+[0-9]+/CMAKE_CXX_STANDARD 17/' "$D/CMakeLists.txt"
          else
            printf '\nset(CMAKE_CXX_STANDARD 17)\n' >> "$D/CMakeLists.txt"
          fi
          # StringRef::starts_with -> startswith (LLVM14)
          find "$D" -type f \( -name '*.cpp' -o -name '*.h' \) -print0 \
            | xargs -0 sed -i 's/\.starts_with(/.startswith(/g' || true
          # Thêm <optional> khi dùng std::optional/nullopt
          mapfile -t OPT_FILES < <(grep -RIl --include='*.{cpp,h}' -e 'std::optional' -e 'std::nullopt' "$D" || true)
          for f in "${OPT_FILES[@]}"; do
            grep -qE '^[[:space:]]*#include <optional>' "$f" || sed -i '1i #include <optional>' "$f"
          done

      # >>>>>>>>>>>>>>>>>>>> QUAN TRỌNG: thay PMRegistration.cpp cho NPM <<<<<<<<<<<<<<<<<<<<
      - name: Replace PMRegistration.cpp (register passes in NPM)
        run: |
          set -euxo pipefail
          D="${{ steps.detect.outputs.build_dir }}"
          F="$D/src/PMRegistration.cpp"
          cat > "$F" <<'CPP'
          #include "llvm/Passes/PassBuilder.h"
          #include "llvm/Passes/PassPlugin.h"
          #include "llvm/IR/PassManager.h"
          #include "llvm/Support/raw_ostream.h"

          // Our passes
          #include "Flattening.h"
          #include "FlatteningEnhanced.h"
          #include "SplitBasicBlock.h"
          #include "BogusControlFlow.h"
          #include "MBAObfuscation.h"
          #include "FunctionWrapper.h"
          #include "VMFlatten.h"
          #include "IndirectBranch.h"
          #include "IndirectCall.h"
          #include "StringEncryption.h"

          using namespace llvm;

          // Đăng ký plugin cho LLVM 14
          extern "C" ::llvm::PassPluginLibraryInfo LLVM_ATTRIBUTE_WEAK
          llvmGetPassPluginInfo() {
            return {
              LLVM_PLUGIN_API_VERSION, "SsageObfuscator", "14",
              [](PassBuilder &PB) {
                // In ra banner một lần đầu pipeline
                PB.registerPipelineStartEPCallback(
                  [](ModulePassManager &MPM, OptimizationLevel OL) {
                    (void)OL;
                    llvm::outs() << "Version is 25\n";
                    llvm::outs() << "Made By SsageParuders\n";

                    // 1) Module-level passes (flag=false -> chỉ chạy khi có annotation)
                    MPM.addPass(FlatteningEnhanced(/*flag=*/false));
                    MPM.addPass(StringEncryptionPass(/*flag=*/false));
                    MPM.addPass(IndirectBranchPass(/*flag=*/false));
                    MPM.addPass(FunctionWrapperPass(/*flag=*/false));

                    // 2) Function-level passes (gói vào adaptor)
                    FunctionPassManager FPM;
                    FPM.addPass(FlatteningPass(/*flag=*/false));       // "ofla"
                    FPM.addPass(SplitBasicBlockPass(/*flag=*/false));   // "split"
                    FPM.addPass(BogusControlFlowPass(/*flag=*/false));  // "bcf"
                    FPM.addPass(MBAObfuscation(/*flag=*/false));        // "mba"
                    FPM.addPass(IndirectCallPass(/*flag=*/false));      // "icall"
                    FPM.addPass(VMFlattenPass(/*flag=*/false, /*optLevel=*/0)); // "vmf"

                    MPM.addPass(createModuleToFunctionPassAdaptor(std::move(FPM)));
                  }
                );
              }
            };
          }
          CPP
          
      - name: Sanitize CMakeLists (drop all set_target_properties; add includes, -fno-rtti, link c++/c++abi)
        run: |
          set -euxo pipefail
          D="${{ steps.detect.outputs.build_dir }}"
          cp "$D/CMakeLists.txt" "$D/CMakeLists.txt.orig" || true

          echo "=== HEAD (original) ==="
          nl -ba "$D/CMakeLists.txt" | sed -n '1,120p' || true

          # 1) Bỏ hardcode compiler/ENV nếu có
          sed -i -E \
            -e 's|^set\(CMAKE_C_COMPILER .*$|# [CI] patched|' \
            -e 's|^set\(CMAKE_CXX_COMPILER .*$|# [CI] patched|' \
            -e 's|^set\(ENV\{LLVM_HOME\} .*$|# [CI] patched|' \
            -e 's|^set\(ENV\{LLVM_DIR\} .*$|# [CI] patched|' \
            "$D/CMakeLists.txt" || true

          # 2) XÓA TOÀN BỘ set_target_properties(...) (mọi biến thể, đa dòng)
          perl -0777 -pe 's/set_target_properties\s*\([\s\S]*?\)\s*//g' -i "$D/CMakeLists.txt"

          # 3) Bảo đảm C++17 + include thư mục LLVM & libc++
          grep -q 'find_package(LLVM' "$D/CMakeLists.txt" || printf '\nfind_package(LLVM REQUIRED CONFIG)\n' >> "$D/CMakeLists.txt"
          if grep -qE 'CMAKE_CXX_STANDARD' "$D/CMakeLists.txt"; then
            sed -i -E 's/CMAKE_CXX_STANDARD[[:space:]]+[0-9]+/CMAKE_CXX_STANDARD 17/' "$D/CMakeLists.txt"
          else
            printf '\nset(CMAKE_CXX_STANDARD 17)\n' >> "$D/CMakeLists.txt"
          fi
          grep -q 'LLVM_INCLUDE_DIRS' "$D/CMakeLists.txt" || printf '\ninclude_directories(${LLVM_INCLUDE_DIRS})\n' >> "$D/CMakeLists.txt"
          grep -q '/usr/include/c++/v1' "$D/CMakeLists.txt" || printf '\ninclude_directories(/usr/include/c++/v1)\n' >> "$D/CMakeLists.txt"

          # 4) Thêm -fno-rtti bằng target_compile_options (nếu target tồn tại)
          {
            echo ''
            echo '# [CI] ensure -fno-rtti'
            echo 'if (TARGET SsageObfuscator)'
            echo '  target_compile_options(SsageObfuscator PRIVATE -fno-rtti)'
            echo 'endif()'
          } >> "$D/CMakeLists.txt"

          # 5) Link libc++/c++abi cho target plugin
          if grep -q 'add_library[[:space:]]*\([[:space:]]*SsageObfuscator' "$D/CMakeLists.txt"; then
            awk '
              { print }
              /^add_library[[:space:]]*\([[:space:]]*SsageObfuscator/ { inlib=1 }
              inlib && /^\)/ { print "target_link_libraries(SsageObfuscator PRIVATE c++ c++abi)"; inlib=0 }
            ' "$D/CMakeLists.txt" > "$D/CMakeLists.txt.ci" && mv "$D/CMakeLists.txt.ci" "$D/CMakeLists.txt"
          fi

          # 6) Thêm flags mặc định khi build
          grep -q 'CMAKE_CXX_FLAGS' "$D/CMakeLists.txt" || printf '\nset(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")\n' >> "$D/CMakeLists.txt"
          grep -q 'CMAKE_SHARED_LINKER_FLAGS' "$D/CMakeLists.txt" || printf '\nset(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -stdlib=libc++ -Wl,-rpath,/usr/lib")\n' >> "$D/CMakeLists.txt"

          echo "=== HEAD (sanitized) ==="
          nl -ba "$D/CMakeLists.txt" | sed -n '1,160p' || true
     
      - name: Configure (host LLVM14)
        env:
          LLVM_DIR: ${{ env.HOST_LLVM_DIR }}
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
        run: |
          set -euxo pipefail
          D="${{ steps.detect.outputs.build_dir }}"
          cmake -S "$D" -B build -G Ninja \
            -DLLVM_DIR="${LLVM_DIR}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER="${CC}" \
            -DCMAKE_CXX_COMPILER="${CXX}" \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_CXX_FLAGS="-stdlib=libc++" \
            -DCMAKE_SHARED_LINKER_FLAGS="-stdlib=libc++ -Wl,-rpath,/usr/lib"

      - name: Build plugin
        run: cmake --build build -j"$(nproc)"

      - name: Locate plugin
        id: find_plugin
        run: |
          set -euxo pipefail
          f=$(find build -type f -name "*SsageObfuscator*.so" -o -name "SsageObfuscator.so" | head -n1 || true)
          test -n "$f" || { echo "::error::plugin .so not found"; exit 1; }
          echo "plugin=$f" >> "$GITHUB_OUTPUT"
          ls -l "$f" && file "$f"

      # Nếu thiếu symbol xchacha20_poly1305_encrypt thì chèn stub *phi bảo mật* để CI không fail
      - name: (Optional) Add non-crypto stub if xchacha* is undefined
        id: stub_xchacha
        run: |
          set -euxo pipefail
          D="${{ steps.detect.outputs.build_dir }}"
          SO="${{ steps.find_plugin.outputs.plugin }}"
          if nm -u "$SO" | c++filt | grep -q '^xchacha20_poly1305_encrypt('; then
            echo ">> Adding fallback stub for xchacha20_poly1305_encrypt (NON-CRYPTO)"
            cat > "$D/src/ci_xchacha_fallback.cpp" <<'CPP'
            #include <vector>
            // Fallback NON-CRYPTO: chỉ copy plaintext, tag = 16 byte 0. Dùng cho CI.
            void xchacha20_poly1305_encrypt(
              const std::vector<unsigned char>& plaintext,
              const std::vector<unsigned char>& key,
              const std::vector<unsigned char>& nonce,
              const std::vector<unsigned char>& ad,
              std::vector<unsigned char>& ciphertext,
              std::vector<unsigned char>& tag
            ){
              (void)key; (void)nonce; (void)ad;
              ciphertext = plaintext;
              tag.assign(16, 0);
            }
            CPP
            if ! grep -q 'ci_xchacha_fallback.cpp' "$D/CMakeLists.txt"; then
              printf '\ntarget_sources(SsageObfuscator PRIVATE ${CMAKE_CURRENT_LIST_DIR}/src/ci_xchacha_fallback.cpp)\n' >> "$D/CMakeLists.txt"
            fi
            cmake -S "$D" -B build -G Ninja \
              -DLLVM_DIR="/usr/lib/llvm-14/lib/cmake/llvm" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER="clang-14" \
              -DCMAKE_CXX_COMPILER="clang-14" \
              -DCMAKE_CXX_STANDARD=17 \
              -DCMAKE_CXX_FLAGS="-stdlib=libc++" \
              -DCMAKE_SHARED_LINKER_FLAGS="-stdlib=libc++ -Wl,-rpath,/usr/lib"
            cmake --build build -j"$(nproc)"
            SO=$(readlink -f "$(find build -type f -name "*SsageObfuscator*.so" -o -name "SsageObfuscator.so" | head -n1)")
            echo "plugin=$SO" >> "$GITHUB_OUTPUT"
            echo "Rebuilt plugin: $SO"
            nm -u "$SO" | c++filt || true
          else
            echo ">> xchacha symbol already resolved"
          fi

      - name: Setup NDK r25c
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          add-to-path: true

      - name: NDK compile test — annotations (NEW PM, -O0)
        run: |
          set -euxo pipefail
          PLUGIN="${{ steps.stub_xchacha.outputs.plugin || steps.find_plugin.outputs.plugin }}"
          NDK="${{ steps.setup-ndk.outputs.ndk-path }}"
          CXX="${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++"
          "$CXX" --version

          cat > test_max.cpp <<'EOF'
          #include <cstdio>
          __attribute__((noinline))
          __attribute((__annotate__(("ofla enfla split strenc bcf mba funwra vmf indibr icall"))))
          static void ultra(){ std::puts("NDK MAX obf (annotated)"); }

          __attribute__((noinline))
          __attribute((__annotate__(("ofla enfla split strenc bcf mba funwra vmf indibr icall"))))
          static void ultra2(){ std::puts("NDK MAX obf 2 (annotated)"); }

          int main(){ ultra(); ultra2(); return 0; }
          EOF

          "$CXX" --target=aarch64-linux-android31 -O0 -fPIC \
            -fpass-plugin="$PLUGIN" \
            -c test_max.cpp -o test_max.o
          "$CXX" --target=aarch64-linux-android31 test_max.o -shared -o libtest_max.so
          file libtest_max.so || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ssagepass-ndk-artifacts
          path: |
            ${{ steps.find_plugin.outputs.plugin }}
            ${{ steps.detect.outputs.build_dir }}/CMakeLists.txt
            ${{ steps.detect.outputs.build_dir }}/CMakeLists.txt.orig
            ${{ github.workspace }}/test_max.cpp
            ${{ github.workspace }}/test_max.o
            ${{ github.workspace }}/libtest_max.so
